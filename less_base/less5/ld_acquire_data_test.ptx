

//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-35583870
// Cuda compilation tools, release 12.8, V12.8.93
// Based on NVVM 7.0.1
//

.version 8.7
.target sm_52
.address_size 64

	// .globl	_Z15test_ld_acquirePiPy
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.global .align 1 .b8 $str[39] = {108, 100, 95, 97, 99, 113, 117, 105, 114, 101, 95, 115, 121, 115, 95, 103, 108, 111, 98, 97, 108, 40, 105, 110, 116, 41, 32, 114, 101, 115, 117, 108, 116, 58, 32, 37, 100, 10};
.global .align 1 .b8 $str$1[46] = {108, 100, 95, 97, 99, 113, 117, 105, 114, 101, 95, 115, 121, 115, 95, 103, 108, 111, 98, 97, 108, 40, 117, 105, 110, 116, 54, 52, 95, 116, 41, 32, 114, 101, 115, 117, 108, 116, 58, 32, 37, 108, 108, 117, 10};
.global .align 1 .b8 $str$2[35] = {108, 100, 95, 97, 99, 113, 117, 105, 114, 101, 95, 103, 108, 111, 98, 97, 108, 40, 105, 110, 116, 41, 32, 114, 101, 115, 117, 108, 116, 58, 32, 37, 100, 10};

.visible .entry _Z15test_ld_acquirePiPy(
	.param .u64 _Z15test_ld_acquirePiPy_param_0,
	.param .u64 _Z15test_ld_acquirePiPy_param_1
)
{
	.local .align 8 .b8 	__local_depot0[8];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<13>;


	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd1, [_Z15test_ld_acquirePiPy_param_0];
	ld.param.u64 	%rd3, [_Z15test_ld_acquirePiPy_param_1];
	add.u64 	%rd5, %SP, 0;
	add.u64 	%rd6, %SPL, 0;
	// begin inline asm
	// 对应CUDA代码：
// __device__ __forceinline__ int ld_acquire_sys_global(const int *ptr) {
//     int ret;
//     asm volatile("ld.acquire.sys.global.s32 %0, [%1];" : "=r"(ret) : "l"(ptr));
//     return ret;
// }
	ld.acquire.sys.global.s32 %r1, [%rd1];  // 系统级获取语义加载32位整数
	// end inline asm
	st.local.u32 	[%rd6], %r1;
	mov.u64 	%rd7, $str;
	cvta.global.u64 	%rd8, %rd7;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd8;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd5;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r3, [retval0+0];
	} // callseq 0
	// begin inline asm
	// 对应CUDA代码：
// __device__ __forceinline__ uint64_t ld_acquire_sys_global(const uint64_t *ptr) {
//     uint64_t ret;
//     asm volatile("ld.acquire.sys.global.u64 %0, [%1];" : "=l"(ret) : "l"(ptr));
//     return ret;
// }
	ld.acquire.sys.global.u64 %rd2, [%rd3];  // 系统级获取语义加载64位无符号整数
	// end inline asm
	st.local.u64 	[%rd6], %rd2;
	mov.u64 	%rd9, $str$1;
	cvta.global.u64 	%rd10, %rd9;
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd10;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd5;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r4, [retval0+0];
	} // callseq 1
	// begin inline asm
	// 对应CUDA代码：
// __device__ __forceinline__ int ld_acquire_global(const int *ptr) {
//     int ret;
//     asm volatile("ld.acquire.gpu.global.s32 %0, [%1];" : "=r"(ret) : "l"(ptr));
//     return ret;
// }
	ld.acquire.gpu.global.s32 %r2, [%rd1];  // GPU级获取语义加载32位整数
	// end inline asm
	st.local.u32 	[%rd6], %r2;
	mov.u64 	%rd11, $str$2;
	cvta.global.u64 	%rd12, %rd11;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd12;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd5;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r5, [retval0+0];
	} // callseq 2
	ret;

}

